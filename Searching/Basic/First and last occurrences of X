Problem Statement:
Given a sorted array having N elements, find the indices of the first and last occurrences of an element X in the given array.
Note: If the number X is not found in the array, return '-1' as an array.

Solution:
public ArrayList<Integer> firstAndLast(int arr[], int n, int x)
    {
        ArrayList<Integer> array=new ArrayList<>();
        int number1=-1,number2=-1;
        int start=0,last=n-1;
        while(start<=last)
        {
            int mid=(last+start)/2;
            if(arr[mid]==x)
            {
                number1=mid;
                last=mid-1;
            }
            else if(arr[mid]<x)
                start=mid+1;
            else
                last=mid-1;
        }
        start=0;last=n-1;
        while(start<=last)
        {
            int mid=(last+start)/2;
            if(arr[mid]==x)
            {
                number2=mid;
                start=mid+1;
            }
            else if(arr[mid]<x)
                start=mid+1;
            else
                last=mid-1;
        }
        if(number1==number2)
        {
            if(number1==-1 && number2==-1)
                array.add(-1);
            else
            {
                array.add(number1);
                array.add(number2);
            }
        }
        else if(number1<number2)
        {
            array.add(number1);
            array.add(number2);
        }
        else
        {
            array.add(number2);
            array.add(number1);
        }
        return array;
    }
